import React, { useState, useEffect, useContext } from 'react';
import {
  View, TextInput, TouchableOpacity, Text, Image,
  StyleSheet, SafeAreaView, ScrollView, Alert, PermissionsAndroid, Platform,
} from 'react-native';
// 이미지 선택 라이브러리
import AntDesign from 'react-native-vector-icons/AntDesign';
import { AuthContext } from '../contexts/AuthContext';

const Post = () => {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [selectedImage, setSelectedImage] = useState(null);
  const { userToken } = useContext(AuthContext);  // AuthContext에서 userToken 가져오기
  console.log(userToken);

  useEffect(() => {
    requestPermission();
  }, []);

  const requestPermission = async () => {
    if (Platform.OS === 'android') {
      try {
        const granted = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE,
          {
            title: 'Permission to access gallery',
            message: 'We need your permission to access your photos',
            buttonNeutral: 'Ask Me Later',
            buttonNegative: 'Cancel',
            buttonPositive: 'OK',
          },
        );
        if (granted === PermissionsAndroid.RESULTS.GRANTED) {
          console.log('You can access the gallery');
        } else {
          console.log('Gallery permission denied');
        }
      } catch (err) {
        console.warn(err);
      }
    }
  };

  const handlePickImage = () => {
    const options = {
      mediaType: 'photo',
      quality: 1,
    };

    ImagePicker.launchImageLibrary(options, (result) => {
      if (result.didCancel) {
        console.log('Image selection canceled');
      } else if (result.errorCode) {
        console.log('Image selection error: ', result.errorMessage);
      } else {
        const uri = result.assets[0].uri;
        setSelectedImage(uri);
      }
    });
  };

  const handlePostSubmit = async () => {
    if (!title.trim() || !content.trim()) {
      Alert.alert('Error', 'Please fill in both the title and content.');
      return;
    }

    const formData = new FormData();
    formData.append('title', title);
    formData.append('content', content);

    if (selectedImage) {
      const fileName = selectedImage.substring(selectedImage.lastIndexOf('/') + 1);
      const image = {
        uri: selectedImage,
        type: 'image/jpeg', // 이미지 타입에 맞게 설정
        name: fileName,
      };
      formData.append('image', image);
    }

    try {
      const response = await fetch('https://ryoko-sketch.duckdns.org/api/notice', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${userToken}`, // 인증 토큰 헤더에 추가
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            title: title,
            content: content,
            viewCnt: '0'
          }),
      });

      if (response.ok) {
        Alert.alert('Success', 'Post submitted successfully!');
        // 폼 초기화
        setTitle('');
        setContent('');
        setSelectedImage(null);
      } else {
        const errorData = await response.json();
        Alert.alert('Error', errorData.message || 'Failed to submit the post.');
      }
    } catch (error) {
      console.error('Post submission error:', error);
      Alert.alert('Error', 'An error occurred while submitting the post.');
    }
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <ScrollView contentContainerStyle={styles.scrollView}>
        {/* 제목 입력 */}
        <TextInput
          style={styles.titleInput}
          placeholder="Title"
          placeholderTextColor="#888"
          value={title}
          onChangeText={setTitle}
        />

        {/* 내용 입력 */}
        <TextInput
          style={styles.contentInput}
          placeholder="What's on your mind?"
          placeholderTextColor="#888"
          value={content}
          onChangeText={setContent}
          multiline={true}
        />

        {/* 이미지 선택 */}
        {selectedImage && (
          <Image source={{ uri: selectedImage }} style={styles.imagePreview} />
        )}
        <TouchableOpacity style={styles.imagePickerButton} onPress={handlePickImage}>
          <AntDesign name="picture" size={24} color="white" />
          <Text style={styles.imagePickerButtonText}>Pick an Image</Text>
        </TouchableOpacity>

        {/* 전송 버튼 */}
        <TouchableOpacity style={styles.submitButton} onPress={handlePostSubmit}>
          <Text style={styles.submitButtonText}>Post</Text>
        </TouchableOpacity>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  // 스타일은 기존과 동일
  safeArea: {
    flex: 1,
    backgroundColor: '#fff',
  },
  scrollView: {
    padding: 20,
  },
  titleInput: {
    borderBottomWidth: 1,
    borderColor: '#ddd',
    padding: 10,
    fontSize: 18,
    marginBottom: 20,
  },
  contentInput: {
    borderWidth: 1,
    borderColor: '#ddd',
    padding: 10,
    fontSize: 16,
    borderRadius: 8,
    height: 150,
    textAlignVertical: 'top',
    marginBottom: 20,
  },
  imagePickerButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#3498db',
    padding: 10,
    borderRadius: 8,
    marginBottom: 20,
  },
  imagePickerButtonText: {
    color: '#fff',
    marginLeft: 10,
  },
  imagePreview: {
    width: '100%',
    height: 200,
    marginBottom: 20,
    borderRadius: 8,
  },
  submitButton: {
    backgroundColor: '#e74c3c',
    padding: 15,
    borderRadius: 8,
    alignItems: 'center',
  },
  submitButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
});

export default Post;
